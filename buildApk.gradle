andResGuard {
    mappingFile = file("./resource_mapping_app-XNOnline-release.txt")
    use7zip = true
    useSign = true
    keepRoot = false

    whiteList = [
            // your icon
            "com.xiaoniu.finance.R.drawable.app_icon",
            // for fabric
            "R.string.com.crashlytics.*",
            // for umeng update
            "R.string.tb_*",
            "R.layout.tb_*",
            "R.drawable.tb_*",
            "R.drawable.u1*",
            "R.drawable.u2*",
            "R.color.tb_*",
            // umeng share for sina
            "R.drawable.sina*",
            // for google-services.json
            "R.string.google_app_id",
            "R.string.gcm_defaultSenderId",
            "R.string.default_web_client_id",
            "R.string.ga_trackingId",
            "R.string.firebase_database_url",
            "R.string.google_api_key",
            "R.string.google_crash_reporting_api_key",

            //友盟
            "R.string.umeng*",
            "R.string.UM*",
            "R.layout.umeng*",
            "R.drawable.umeng*",
            "R.id.umeng*",
            "R.anim.umeng*",
            "R.color.umeng*",
            "R.style.*UM*",
            "R.style.umeng*",
    ]
    compressFilePattern = [
            "*.png",
            "*.jpg",
            "*.jpeg",
            "*.gif",
            "resources.arsc"
    ]
    sevenzip {
        artifact = 'com.tencent.mm:SevenZip:1.1.10'
        //path = "/usr/local/bin/7za"
    }


}

def bakPath = file("${projectDir}/${LOCAL_APK_PATH}/")
/**
 * bak apk and mapping
 */
android.applicationVariants.all { variant ->
    /**
     * task type, you want to bak
     */
    def taskName = variant.name


    tasks.all {

        if (variant.buildType.name == 'release') {

            def andResDir = "${buildDir}/outputs/apk/AndResGuard_XNOnline_${readVersion()}";

            if ("tinkerPatch${taskName.capitalize()}".equalsIgnoreCase(it.name)) {

                // find resguard task
                def resguardTask
                tasks.all {
                    if (it.name.startsWith("resguard${taskName.capitalize()}")) {
                        resguardTask = it
                    }
                }
                it.doFirst({
                    // change build apk path
                    it.buildApkPath = "${andResDir}/XNOnline_${readVersion()}_aligned_signed.apk"
                })

                // change task dependence to resguard task
                it.dependsOn resguardTask

            }

//            if ("resguard${taskName.capitalize()}".equalsIgnoreCase(it.name)) {
//                it.doLast {
//                    copy {
//                        def outDir = file("${bakPath()}/resguard-${detailedBuildTime()}")
//
//                        from "${andResDir}/${project.getName()}-${taskName}_aligned_signed.apk"
//                        into outDir
//                        rename { String fileName ->
//                            fileName.replace("${project.getName()}-${taskName}_aligned_signed.apk", "${appName()}.apk")
//                        }
//
//                        from "${buildDir}/outputs/mapping/${taskName}/mapping.txt"
//                        into outDir
//                        rename { String fileName ->
//                            fileName.replace("mapping.txt", "${appName()}-mapping.txt")
//                        }
//
//                        from "${buildDir}/intermediates/symbols/${taskName}/R.txt"
//                        into outDir
//                        rename { String fileName ->
//                            fileName.replace("R.txt", "${appName()}-R.txt")
//                        }
//
//                        from "${andResDir}/resource_mapping_${project.getName()}-release.txt"
//                        into outDir
//                        rename { String fileName ->
//                            fileName.replace("resource_mapping_${project.getName()}-release.txt", "${appName()}-resource_mapping.txt")
//                        }
//                    }
//                }
//            }
        }
    }
}

android.applicationVariants.all { variant ->
    tasks.all {
        it.doFirst {
            if (!file("../../myapks").isFile()) {
                file("../../myapks").mkdir()
            }
        }
        it.doLast {
            if (it.name.equals("assembleRelease")) {
                def andResDir = "${buildDir}/outputs/apk/AndResGuard_XNOnline_${readVersion()}";
                copy {
                    from "${buildDir}/outputs/mapping/release/mapping.txt"
                    into "${buildDir}/outputs/apk/"
                    from "${buildDir}/intermediates/symbols/release/R.txt"
                    into "${buildDir}/outputs/apk/"
                }
            }
            if (it.name.startsWith("assemble") && it.name.endsWith("Debug")) {
                File file1 = file("./tinker")
                file1.deleteDir();
            }
        }
        if (it.name.startsWith("apkRelease")) {
            it.doLast {
                copy {
                    def destPath = file("${project.rootProject.buildDir.path}/myapks")

                    from "${buildDir}/outputs/mapping/release/mapping.txt"
                    into destPath
                    from "${buildDir}/intermediates/symbols/release/R.txt"
                    into destPath
                }
            }
        }
    }
    variant.outputs.each { output ->
        def outputFile = output.outputFile

        if (outputFile != null && outputFile.name.endsWith('.apk')) {
            def fileName = "XNOnline_" + readVersion() + ".apk"
            output.outputFile = new File(outputFile.parent, fileName)
        }
    }
}